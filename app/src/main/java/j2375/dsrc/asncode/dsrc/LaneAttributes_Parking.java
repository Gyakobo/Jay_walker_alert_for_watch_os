/*
Copyright (C) 1999-2011 Marben Products. All rights reserved.

THIS FILE IS PROPRIETARY MATERIAL OF MARBEN PRODUCTS.
AND MAY BE USED ONLY BY DIRECT LICENSEES OF ASNSDK PRODUCT.
THIS FILE MAY NOT BE DISTRIBUTED.

===========================================================================

/home/itsrc/J2375_2016/src/asncode/dsrc/LaneAttributes_Parking.java: 

Generated by ASNSDK TCE-JAVA ASN.1 Compiler v4.0 - REF_8.55 - REF_8.39

===========================================================================
*/
package j2375.dsrc.asncode.dsrc;

/**
 * Class definition of the LaneAttributes_Parking type of the dsrc module.
 */
public class LaneAttributes_Parking extends fr.marben.asnsdk.japi.spe.BitStringValue
{
  /**
   * value of the named bit parkingRevocableLane.
   */
  public static final int ASN_parkingRevocableLane = 0;

  /**
   * value of the named bit parallelParkingInUse.
   */
  public static final int ASN_parallelParkingInUse = 1;

  /**
   * value of the named bit headInParkingInUse.
   */
  public static final int ASN_headInParkingInUse = 2;

  /**
   * value of the named bit doNotParkZone.
   */
  public static final int ASN_doNotParkZone = 3;

  /**
   * value of the named bit parkingForBusUse.
   */
  public static final int ASN_parkingForBusUse = 4;

  /**
   * value of the named bit parkingForTaxiUse.
   */
  public static final int ASN_parkingForTaxiUse = 5;

  /**
   * value of the named bit noPublicParkingUse.
   */
  public static final int ASN_noPublicParkingUse = 6;

  /**
   *  Constructs a newly allocated LaneAttributes_Parking.
   */
  public LaneAttributes_Parking ()
  {
    super();
  };

  /**
   *  Constructs a newly allocated LaneAttributes_Parking.
   *  Sets the number of used bits using the int parameter
   *  and sets the internal value using the bytes array parameter.
   *  @param value the value to be represented by this LaneAttributes_Parking.
   *  @param bitCount the number of used bits to be represented by this LaneAttributes_Parking.
   *  @throws IllegalArgumentException if the bitCount is not consistent with the length of the value.
   */
  public LaneAttributes_Parking (byte[] value, int bitCount)
  {
    super(value, bitCount);
  }

  /**
   *  Constructs a newly allocated LaneAttributes_Parking.
   *  Sets the number of used bits using the int parameter
   *  and sets the internal value using the subarray of bytes.
   *  @param value the array containing the value to be represented by this LaneAttributes_Parking.
   *  @param bitOffset  the index of the first bit to be represented by this LaneAttributes_Parking.
   *  @param bitCount the number of used bits to be represented by this LaneAttributes_Parking.
   *  @throws IllegalArgumentException if the bitCount and bitOffset are not consistent with the length of the value.
   */
  public LaneAttributes_Parking (byte[] value, int bitOffset, int bitCount)
  {
    super(value, bitOffset, bitCount);
  }
}
