/*
Copyright (C) 1999-2011 Marben Products. All rights reserved.

THIS FILE IS PROPRIETARY MATERIAL OF MARBEN PRODUCTS.
AND MAY BE USED ONLY BY DIRECT LICENSEES OF ASNSDK PRODUCT.
THIS FILE MAY NOT BE DISTRIBUTED.

===========================================================================

/home/itsrc/J2375_2016/src/asncode/dsrc/WiperStatus.java: 

Generated by ASNSDK TCE-JAVA ASN.1 Compiler v4.0 - REF_8.55 - REF_8.39

===========================================================================
*/
package j2375.dsrc.asncode.dsrc;

/**
 * <BR> units of sweeps per minute
 * Class definition of the WiperStatus type of the dsrc module.
 */
public class WiperStatus extends fr.marben.asnsdk.japi.spe.ExtEnumeratedValue
{
  /**
   * value of the named enumerated unavailable.
   */
  public static final int ASN_unavailable = 0;

  /**
   * value of the named enumerated off.
   */
  public static final int ASN_off = 1;

  /**
   * value of the named enumerated intermittent.
   */
  public static final int ASN_intermittent = 2;

  /**
   * value of the named enumerated low.
   */
  public static final int ASN_low = 3;

  /**
   * value of the named enumerated high.
   */
  public static final int ASN_high = 4;

  /**
   * value of the named enumerated washerInUse.
   */
  public static final int ASN_washerInUse = 5;

  /**
   * value of the named enumerated automaticPresent.
   */
  public static final int ASN_automaticPresent = 6;

  /**
   *  Constructs a newly allocated WiperStatus.
   */
  public WiperStatus ()
  {
    super();
  };

  /**
   *  Constructs a newly allocated WiperStatus that represents the primitive int argument.
   *  @param value the value to be represented by this WiperStatus.
   */
  public WiperStatus (int value)
  {
    super(value);
  };

  /**
   *  Constructs a newly allocated WiperStatus that represents the unknownExt argument.
   *  @param unknownExt the unknown extension value to be represented by this WiperStatus.
   */
  public WiperStatus (fr.marben.asnsdk.japi.UnknownExtensionValue unknownExt)
  {
    super(unknownExt);
  };
}
