/*
Copyright (C) 1999-2011 Marben Products. All rights reserved.

THIS FILE IS PROPRIETARY MATERIAL OF MARBEN PRODUCTS.
AND MAY BE USED ONLY BY DIRECT LICENSEES OF ASNSDK PRODUCT.
THIS FILE MAY NOT BE DISTRIBUTED.

===========================================================================

/home/itsrc/J2375_2016/src/asncode/dsrc/LaneAttributes_Crosswalk.java: 

Generated by ASNSDK TCE-JAVA ASN.1 Compiler v4.0 - REF_8.55 - REF_8.39

===========================================================================
*/
package j2375.dsrc.asncode.dsrc;

/**
 * Class definition of the LaneAttributes_Crosswalk type of the dsrc module.
 */
public class LaneAttributes_Crosswalk extends fr.marben.asnsdk.japi.spe.BitStringValue
{
  /**
   * value of the named bit crosswalkRevocableLane.
   */
  public static final int ASN_crosswalkRevocableLane = 0;

  /**
   * value of the named bit bicyleUseAllowed.
   */
  public static final int ASN_bicyleUseAllowed = 1;

  /**
   * value of the named bit isXwalkFlyOverLane.
   */
  public static final int ASN_isXwalkFlyOverLane = 2;

  /**
   * value of the named bit fixedCycleTime.
   */
  public static final int ASN_fixedCycleTime = 3;

  /**
   * value of the named bit biDirectionalCycleTimes.
   */
  public static final int ASN_biDirectionalCycleTimes = 4;

  /**
   * value of the named bit hasPushToWalkButton.
   */
  public static final int ASN_hasPushToWalkButton = 5;

  /**
   * value of the named bit audioSupport.
   */
  public static final int ASN_audioSupport = 6;

  /**
   * value of the named bit rfSignalRequestPresent.
   */
  public static final int ASN_rfSignalRequestPresent = 7;

  /**
   * value of the named bit unsignalizedSegmentsPresent.
   */
  public static final int ASN_unsignalizedSegmentsPresent = 8;

  /**
   *  Constructs a newly allocated LaneAttributes_Crosswalk.
   */
  public LaneAttributes_Crosswalk ()
  {
    super();
  };

  /**
   *  Constructs a newly allocated LaneAttributes_Crosswalk.
   *  Sets the number of used bits using the int parameter
   *  and sets the internal value using the bytes array parameter.
   *  @param value the value to be represented by this LaneAttributes_Crosswalk.
   *  @param bitCount the number of used bits to be represented by this LaneAttributes_Crosswalk.
   *  @throws IllegalArgumentException if the bitCount is not consistent with the length of the value.
   */
  public LaneAttributes_Crosswalk (byte[] value, int bitCount)
  {
    super(value, bitCount);
  }

  /**
   *  Constructs a newly allocated LaneAttributes_Crosswalk.
   *  Sets the number of used bits using the int parameter
   *  and sets the internal value using the subarray of bytes.
   *  @param value the array containing the value to be represented by this LaneAttributes_Crosswalk.
   *  @param bitOffset  the index of the first bit to be represented by this LaneAttributes_Crosswalk.
   *  @param bitCount the number of used bits to be represented by this LaneAttributes_Crosswalk.
   *  @throws IllegalArgumentException if the bitCount and bitOffset are not consistent with the length of the value.
   */
  public LaneAttributes_Crosswalk (byte[] value, int bitOffset, int bitCount)
  {
    super(value, bitOffset, bitCount);
  }
}
