/*
Copyright (C) 1999-2011 Marben Products. All rights reserved.

THIS FILE IS PROPRIETARY MATERIAL OF MARBEN PRODUCTS.
AND MAY BE USED ONLY BY DIRECT LICENSEES OF ASNSDK PRODUCT.
THIS FILE MAY NOT BE DISTRIBUTED.

===========================================================================

/home/itsrc/J2375_2016/src/asncode/dsrc/PersonalAssistive.java: 

Generated by ASNSDK TCE-JAVA ASN.1 Compiler v4.0 - REF_8.55 - REF_8.39

===========================================================================
*/
package j2375.dsrc.asncode.dsrc;

/**
 * Class definition of the PersonalAssistive type of the dsrc module.
 */
public class PersonalAssistive extends fr.marben.asnsdk.japi.spe.BitStringValue
{
  /**
   * value of the named bit unavailable.
   */
  public static final int ASN_unavailable = 0;

  /**
   * value of the named bit otherType.
   */
  public static final int ASN_otherType = 1;

  /**
   * value of the named bit vision.
   */
  public static final int ASN_vision = 2;

  /**
   * value of the named bit hearing.
   */
  public static final int ASN_hearing = 3;

  /**
   * value of the named bit movement.
   */
  public static final int ASN_movement = 4;

  /**
   * value of the named bit cognition.
   */
  public static final int ASN_cognition = 5;

  /**
   *  Constructs a newly allocated PersonalAssistive.
   */
  public PersonalAssistive ()
  {
    super();
  };

  /**
   *  Constructs a newly allocated PersonalAssistive.
   *  Sets the number of used bits using the int parameter
   *  and sets the internal value using the bytes array parameter.
   *  @param value the value to be represented by this PersonalAssistive.
   *  @param bitCount the number of used bits to be represented by this PersonalAssistive.
   *  @throws IllegalArgumentException if the bitCount is not consistent with the length of the value.
   */
  public PersonalAssistive (byte[] value, int bitCount)
  {
    super(value, bitCount);
  }

  /**
   *  Constructs a newly allocated PersonalAssistive.
   *  Sets the number of used bits using the int parameter
   *  and sets the internal value using the subarray of bytes.
   *  @param value the array containing the value to be represented by this PersonalAssistive.
   *  @param bitOffset  the index of the first bit to be represented by this PersonalAssistive.
   *  @param bitCount the number of used bits to be represented by this PersonalAssistive.
   *  @throws IllegalArgumentException if the bitCount and bitOffset are not consistent with the length of the value.
   */
  public PersonalAssistive (byte[] value, int bitOffset, int bitCount)
  {
    super(value, bitOffset, bitCount);
  }
}
