/*
Copyright (C) 1999-2011 Marben Products. All rights reserved.

THIS FILE IS PROPRIETARY MATERIAL OF MARBEN PRODUCTS.
AND MAY BE USED ONLY BY DIRECT LICENSEES OF ASNSDK PRODUCT.
THIS FILE MAY NOT BE DISTRIBUTED.

===========================================================================

/home/itsrc/J2375_2016/src/asncode/dsrc/AllowedManeuvers.java: 

Generated by ASNSDK TCE-JAVA ASN.1 Compiler v4.0 - REF_8.55 - REF_8.39

===========================================================================
*/
package j2375.dsrc.asncode.dsrc;

/**
 * <BR> Note: subject to further growth
 * Class definition of the AllowedManeuvers type of the dsrc module.
 */
public class AllowedManeuvers extends fr.marben.asnsdk.japi.spe.BitStringValue
{
  /**
   * value of the named bit maneuverStraightAllowed.
   */
  public static final int ASN_maneuverStraightAllowed = 0;

  /**
   * value of the named bit maneuverLeftAllowed.
   */
  public static final int ASN_maneuverLeftAllowed = 1;

  /**
   * value of the named bit maneuverRightAllowed.
   */
  public static final int ASN_maneuverRightAllowed = 2;

  /**
   * value of the named bit maneuverUTurnAllowed.
   */
  public static final int ASN_maneuverUTurnAllowed = 3;

  /**
   * value of the named bit maneuverLeftTurnOnRedAllowed.
   */
  public static final int ASN_maneuverLeftTurnOnRedAllowed = 4;

  /**
   * value of the named bit maneuverRightTurnOnRedAllowed.
   */
  public static final int ASN_maneuverRightTurnOnRedAllowed = 5;

  /**
   * value of the named bit maneuverLaneChangeAllowed.
   */
  public static final int ASN_maneuverLaneChangeAllowed = 6;

  /**
   * value of the named bit maneuverNoStoppingAllowed.
   */
  public static final int ASN_maneuverNoStoppingAllowed = 7;

  /**
   * value of the named bit yieldAllwaysRequired.
   */
  public static final int ASN_yieldAllwaysRequired = 8;

  /**
   * value of the named bit goWithHalt.
   */
  public static final int ASN_goWithHalt = 9;

  /**
   * value of the named bit caution.
   */
  public static final int ASN_caution = 10;

  /**
   * value of the named bit reserved1.
   */
  public static final int ASN_reserved1 = 11;

  /**
   *  Constructs a newly allocated AllowedManeuvers.
   */
  public AllowedManeuvers ()
  {
    super();
  };

  /**
   *  Constructs a newly allocated AllowedManeuvers.
   *  Sets the number of used bits using the int parameter
   *  and sets the internal value using the bytes array parameter.
   *  @param value the value to be represented by this AllowedManeuvers.
   *  @param bitCount the number of used bits to be represented by this AllowedManeuvers.
   *  @throws IllegalArgumentException if the bitCount is not consistent with the length of the value.
   */
  public AllowedManeuvers (byte[] value, int bitCount)
  {
    super(value, bitCount);
  }

  /**
   *  Constructs a newly allocated AllowedManeuvers.
   *  Sets the number of used bits using the int parameter
   *  and sets the internal value using the subarray of bytes.
   *  @param value the array containing the value to be represented by this AllowedManeuvers.
   *  @param bitOffset  the index of the first bit to be represented by this AllowedManeuvers.
   *  @param bitCount the number of used bits to be represented by this AllowedManeuvers.
   *  @throws IllegalArgumentException if the bitCount and bitOffset are not consistent with the length of the value.
   */
  public AllowedManeuvers (byte[] value, int bitOffset, int bitCount)
  {
    super(value, bitOffset, bitCount);
  }
}
