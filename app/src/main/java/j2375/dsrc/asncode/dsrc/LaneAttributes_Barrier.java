/*
Copyright (C) 1999-2011 Marben Products. All rights reserved.

THIS FILE IS PROPRIETARY MATERIAL OF MARBEN PRODUCTS.
AND MAY BE USED ONLY BY DIRECT LICENSEES OF ASNSDK PRODUCT.
THIS FILE MAY NOT BE DISTRIBUTED.

===========================================================================

/home/itsrc/J2375_2016/src/asncode/dsrc/LaneAttributes_Barrier.java: 

Generated by ASNSDK TCE-JAVA ASN.1 Compiler v4.0 - REF_8.55 - REF_8.39

===========================================================================
*/
package j2375.dsrc.asncode.dsrc;

/**
 * Class definition of the LaneAttributes_Barrier type of the dsrc module.
 */
public class LaneAttributes_Barrier extends fr.marben.asnsdk.japi.spe.BitStringValue
{
  /**
   * value of the named bit median_RevocableLane.
   */
  public static final int ASN_median_RevocableLane = 0;

  /**
   * value of the named bit median.
   */
  public static final int ASN_median = 1;

  /**
   * value of the named bit whiteLineHashing.
   */
  public static final int ASN_whiteLineHashing = 2;

  /**
   * value of the named bit stripedLines.
   */
  public static final int ASN_stripedLines = 3;

  /**
   * value of the named bit doubleStripedLines.
   */
  public static final int ASN_doubleStripedLines = 4;

  /**
   * value of the named bit trafficCones.
   */
  public static final int ASN_trafficCones = 5;

  /**
   * value of the named bit constructionBarrier.
   */
  public static final int ASN_constructionBarrier = 6;

  /**
   * value of the named bit trafficChannels.
   */
  public static final int ASN_trafficChannels = 7;

  /**
   * value of the named bit lowCurbs.
   */
  public static final int ASN_lowCurbs = 8;

  /**
   * value of the named bit highCurbs.
   */
  public static final int ASN_highCurbs = 9;

  /**
   *  Constructs a newly allocated LaneAttributes_Barrier.
   */
  public LaneAttributes_Barrier ()
  {
    super();
  };

  /**
   *  Constructs a newly allocated LaneAttributes_Barrier.
   *  Sets the number of used bits using the int parameter
   *  and sets the internal value using the bytes array parameter.
   *  @param value the value to be represented by this LaneAttributes_Barrier.
   *  @param bitCount the number of used bits to be represented by this LaneAttributes_Barrier.
   *  @throws IllegalArgumentException if the bitCount is not consistent with the length of the value.
   */
  public LaneAttributes_Barrier (byte[] value, int bitCount)
  {
    super(value, bitCount);
  }

  /**
   *  Constructs a newly allocated LaneAttributes_Barrier.
   *  Sets the number of used bits using the int parameter
   *  and sets the internal value using the subarray of bytes.
   *  @param value the array containing the value to be represented by this LaneAttributes_Barrier.
   *  @param bitOffset  the index of the first bit to be represented by this LaneAttributes_Barrier.
   *  @param bitCount the number of used bits to be represented by this LaneAttributes_Barrier.
   *  @throws IllegalArgumentException if the bitCount and bitOffset are not consistent with the length of the value.
   */
  public LaneAttributes_Barrier (byte[] value, int bitOffset, int bitCount)
  {
    super(value, bitOffset, bitCount);
  }
}
