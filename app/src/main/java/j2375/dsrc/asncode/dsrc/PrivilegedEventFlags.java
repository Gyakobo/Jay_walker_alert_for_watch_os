/*
Copyright (C) 1999-2011 Marben Products. All rights reserved.

THIS FILE IS PROPRIETARY MATERIAL OF MARBEN PRODUCTS.
AND MAY BE USED ONLY BY DIRECT LICENSEES OF ASNSDK PRODUCT.
THIS FILE MAY NOT BE DISTRIBUTED.

===========================================================================

/home/itsrc/J2375_2016/src/asncode/dsrc/PrivilegedEventFlags.java: 

Generated by ASNSDK TCE-JAVA ASN.1 Compiler v4.0 - REF_8.55 - REF_8.39

===========================================================================
*/
package j2375.dsrc.asncode.dsrc;

/**
 * Class definition of the PrivilegedEventFlags type of the dsrc module.
 */
public class PrivilegedEventFlags extends fr.marben.asnsdk.japi.spe.BitStringValue
{
  /**
   * value of the named bit peUnavailable.
   */
  public static final int ASN_peUnavailable = 0;

  /**
   * value of the named bit peEmergencyResponse.
   */
  public static final int ASN_peEmergencyResponse = 1;

  /**
   * value of the named bit peEmergencyLightsActive.
   */
  public static final int ASN_peEmergencyLightsActive = 2;

  /**
   * value of the named bit peEmergencySoundActive.
   */
  public static final int ASN_peEmergencySoundActive = 3;

  /**
   * value of the named bit peNonEmergencyLightsActive.
   */
  public static final int ASN_peNonEmergencyLightsActive = 4;

  /**
   * value of the named bit peNonEmergencySoundActive.
   */
  public static final int ASN_peNonEmergencySoundActive = 5;

  /**
   *  Constructs a newly allocated PrivilegedEventFlags.
   */
  public PrivilegedEventFlags ()
  {
    super();
  };

  /**
   *  Constructs a newly allocated PrivilegedEventFlags.
   *  Sets the number of used bits using the int parameter
   *  and sets the internal value using the bytes array parameter.
   *  @param value the value to be represented by this PrivilegedEventFlags.
   *  @param bitCount the number of used bits to be represented by this PrivilegedEventFlags.
   *  @throws IllegalArgumentException if the bitCount is not consistent with the length of the value.
   */
  public PrivilegedEventFlags (byte[] value, int bitCount)
  {
    super(value, bitCount);
  }

  /**
   *  Constructs a newly allocated PrivilegedEventFlags.
   *  Sets the number of used bits using the int parameter
   *  and sets the internal value using the subarray of bytes.
   *  @param value the array containing the value to be represented by this PrivilegedEventFlags.
   *  @param bitOffset  the index of the first bit to be represented by this PrivilegedEventFlags.
   *  @param bitCount the number of used bits to be represented by this PrivilegedEventFlags.
   *  @throws IllegalArgumentException if the bitCount and bitOffset are not consistent with the length of the value.
   */
  public PrivilegedEventFlags (byte[] value, int bitOffset, int bitCount)
  {
    super(value, bitOffset, bitCount);
  }
}
